# Reference vs Primitive types

The difference between reference and primitive types is that primitive types store the actual value
themselves.

const a = 1;
const b = a;

b = 2;

console.log(a,b);
a => 1
b => 2

With reference types they point to the same location in memory

const person = {name: 'max'};
const newPerson = person;

newPerson.name = 'Daniel';

Both names will change because both variables point to the same place in memory, to circumvent
this behaviour we can use the spread operator to copy the objects properties

const newPerson = {...person};

# Starting a react project

The team at facebook crated a git repo which we can use to create a template react app

just navigate to the folder you want your project in and type : npx create-react-app app-name
then cd into that folder and write npm start

# Creating a new compoenent (where to put it, naming convetion)

The convetion is to create a components folder in the src folder

Then we type the component name like this: MyComponent, ExpenseItem, TodoItem etc
Next to this component we also put the css file which will have the same name but .css termination

In the component js file we have to import the css file liek this

import './MyCssFile.css';

And we can import other components if we wish to use then

# What is JSX ?

JSX Stands for JavaScript XML and is a special syntax used in a react project that can help us
write HTML like code in a Javascript file which will get parsed later behind the scenes

# What are props in react?

Props in react is a way of passing data trough different components as a key value pair.

The component passing the data:
<MyComponent data={externalDataArray}/>

/* MyComponent

function MyComponent(props) {
  return (
   <div>My name is: {props.data.name} </div>
);

}


You will use props all the time it allows your components to be reusable and it allows to pass
data from one component to another

# Using JS logic in React

It is a good practice to put any JS code before the return statement and reference it in the 
return statement


# What is composition ?

Composition is building a UI from smaller blocks (compnents)

# How do we create wrappers in React, How do we make them work?

In our project we created a card wrapper that wrapped around each expense item and the whole expense list. 
A wrapper is a components that acts like a shell around another component

<Card>
  <Expenses data={expenses}
</Card>

The card component looks something like this

function Card(props){
  const classes = "card " + props.className;

  return(
  <div className={classes}>{props.children}</div>
)
};

We use the classes variable so that the children of each card will have the card selector and their
own selector, thus appling both styles

# What is children.props and when do we use it?

In the case above we need children.props because that will be the content between the opening and closing tags

<Card>
 ...children JSX
</Card>

# Why can we find in older projects import react from 'react' ?

Because in older projects we had to import react in each component in order to use react.renderComponent

# Event Handlers in React ?

Event handlers in react are fairly easy. 

We just add a event handler prop on a component

<form onSubmit={formSubmitHandler}>
  ...
</form>

# What is React State ?

React state is a hook (more on this later) which helps us track the state of a component

We import it like this: import {useState} from 'react'

React state always returns an array of 2 elements, the first one is the initial state and the second
one is the a function which sets the state when called

const [date, setDate] = useState(initialDate);

function dateHandler(inputDate){
  setDate(inputDate);
}

the setters don't happen instantly, they are scheduled behinde the scenes. Also when the setDate
function is ran, it triggers a component rerender

# When do we need states ?

We need states when data in a component changes and we need to track and update that component when
it changes

# Does useState keep track of the initial value?

useState accepts the initial value variable as an argument

# What happens when we call the function from useState?

It re-renders the component in which useState is called

# Using one state instead of multiple states

In our test app we had a form where the user fills out 3 form inputs. We want to store the inputs in state each time a change is happening
so for this we create a new State for each one.

const [inputTitle, setInputTitle] = useState('');
const [inputAmount, setInputAmount] = useState('');

function inputTitleHandler(event) {
  setInputTitle(event.target.value);
}

<input type='text' onChange={inputTitleHandler}>

# The correct way of updating state and why is it better?

Now I am not sure if we should use this only when using multiple states in a single use state or even when using seperate single states

Using multiple states

const [userInput, setInput] = useState({
  inputTitle: '',
  inputAmount: '',
})

function inputTitleHandler(event) {
  setInput((prevState) => {
  return  {...prevState, inputTitle: event.target.value}
)
}
}

# What is a two-way binding and where did we used it?

Simple definiton: Two-way binding is a process of listening to events on a component and changing/resetting the state of that component.


Two way binding means that we not only listen to changes on a component but we can pass in a new value to reset or change the input 
programatically

We first used this in our form. 

const [inputTitle, setInputTitle] = useState('');
const [inputAmount, setInputAmount] = useState('');

function inputTitleHandler(event) {
  setInputTitle(event.target.value);
}

<input type='text' onChange={inputTitleHandler} value={inputTitle}>

Now imagine we have a function that executes when we submit a form. This function before returning it will use setInputTitle('') to an
empty string and after it returns it will reset that field thus creating a 2 way binding.

So again by doing this we create a 2 way binding because we can pass value into an input field and also reset that input field (or change
it if we want to)

# We know how to pass data from parent > child but how do we pass data from child > parent ?

In order to pass data from parent to child we use props

// App.js

<Expenses data={expensesArray}/> // We passed the data prop to the Expenses component

// Expenses.js

function Expenses(props) {
  <div className="expenses">
    <h2>{props.title}</h2>
  </div>
}

Now in order to pass data from the child to the parent we use a very clever way. We use another prop on the parent component which
accepts data as an argument then we call that function in the child component with the data that we obtained from that component

// Parent.js

function dataHandler(data) {
  console.log(data}
}

<Child date={someData} onAddDate={dataHandler}>

// Child.js

function Child(props) {
  
  function dateChangeHandler(event){
    props.onAddDate(event.target.value);
  }

  return (
    <input type='date' onChange={dateChangeHandler}/>
}

# What is the difference between a parameter and an argument in funtions?

Parameters are the ones that a function needs and arguments are variables we pass in when we call
the funtion

# What do we need to find when we want to pass data between 2 sibbling components

We need to find the first common parent.

Explanation:

In our project we have 2 sibbling components. One that generates data (by a user filling out a form) and one component that needs that
data to render a new expense. In order for the component that needs data we need to find the first common parent so that the other component
can 'send' the data to that parent and after that, the parent component can pass the data down to the component that needs that data.

Parent : App.js
Data Generator Component: ExpenseForm.js
Component that renders the datra : Expenses.js > NewExpense.js

# How do we lift the state up, and how did we do it in our example?

Lifting up the state is basically what we explained in the previous section.

We lift up the state when we call the prop that fetches the data from the child component.  

# How high do we have to lift the state?

This was also explained. we need to lift the state as high as necesarry until we reach a common parent between the 2 components that
generate and need the data.

# Recreate the filterExpenses by yourself (don't forget 2 way binding)

Done in VSCode.


# What is a Controlled Component

Whenever we create a two-way binding we create a controlled component meaning a value used in the child is passed on to the parent
using props and also with props we do something with that value in the parent component

# How to programatically render multiple components in React?

We can use map, filter to generate multiple react components in the JSX syntax, even typing [<div></div>, <h2>test</h2] in the return
statement of the component will render that array of elements

Using this logic we can do the following

return (
  <div>
    {props.items.map(expense => <Expense title={expense.title}}
  </div>
)

# What are stateful lists and where did we use them in our project?

Stateful lists are arrays on which we keep track of their state (when something is added or removed from them). We used this in our project
to re-render the Expenses component whenever our expenses array receives a new expense or an expense gets removed.

# We get a key error when we have no defined key prop on our list, why is that, what are the downfalls of this and how to fix it?

Whenever we display a list in react (eg array of expenses) react excepts to have a unique key for each of them in order to optimize rendering
them.

This can be done by using the key prop on the displayed array element

<ExpenseItem key={expense.key}>

If we don't use this React has no way of identifiying each separate element from the array so it basically adds a new expense in the 
beginning of the list and then rerenders the whole array but using keys it just ads the element to the beggining of the lsit without
re-rendering all items.

# How to hide/show stuff in react(no css needed and old type event lsiteners)
We had a task to hide the form in our app and only open it when a certain button is clicked. With my previous knowledge I would've added
event listeners and do some CSS magic for this to happen but in in React we can use plain js or jsx code to make this happen.

For this to work we needed a state for isEditing and when its false the form is hidden other wise the form is shown

Expenses.js

const [isEditing, setIsEditing] = useState(false) // setting it false by default

function cancelEditHandler(){
  setIsEditing(false)
}

function startEditHandler(){
  setIsEditing(true)
}

return (
  <Card>
    {!isEditing && <button onClick={startEditingHandler}>Add New Expense</button>}
    {isEditing && <ExpenseForm cancelEditing={cancelEditHandler}}
  </Card>

)

We pass on the cancelHandler to the expenseform which will contain a cancel button and when that is click isEditing is set to false

# How to output conditional content in js

We needed conditional content when our filtered expenses had the lenght of 0

And this is how the logic works

return(
  <div>
    {filteredExpenses.lenght > 0 ? <Expenses data={filteredExpenses}: <p>No results found</p>}
  </div>

)

# How to add inline styles in react? (+Dynamic)

To apply inline styles we just do the following:

<MyComponent style={{height: '100px', 'background-color': 'red', }}/>

To use them in a dynamic way I do the following

<MyComponent style={{backgroundColor: formIsValid ? 'white' : 'red'}}

# How to use Styled components in react? (Dynamic + Media queries also)

Styled components are an external JS library so we have to install them by

npm install styled-components --save

After that we import them in the component we want to use 

import styled from'styled-components'

const Button = styled.button`
  height: 20px;
  width: 20px
  cursor: pointer; 
  background-color: ${formIsValid ? 'grey' : 'red'}
 
  &:hover{
    font-size: 20px;
  }

`
!! This formIsValid has to be a prop passed to the component

This is the component, even tough it looks weird the backticks are simple JS syntax and this Button is ran behind the scense

And that is how we add dynamic rules with styled components

# How to use CSS Modules in react? (All steps) And what does it do under the hood?

CSS Modules is the best of both worlds in React meaning that it will still scope the CSS to the component and it maintains a 
relatively friendly approach

We are in luck because React by default uses CSS Modules we just have to change our code a bit

Instead of MyComponent.css we write MyComponent.module.css
After this we change the import to : import styles from './MyComponent.module.css'

Now in order to apply this we have to write classNames a bit different, under the hood this styles method tranforms our CSS Classes
into object properties so this is how we reference them

<FormExpense className={`${styles['form-control']} ${!formIsValid && styles['form-control--invalid']}`}>
  ...
</FormExpense>

# Why are styled components different than using the method we did before ?

Before our CSS files behaved like global CSS, meaning if we had a style on component and we used another component which had the same
style it would both apply. CSS Modules and Styled Components scope the styles to the component and when you check in developer
options you will see that these don't have the classNames anymore, they are unique.

# How to remove an element from an array using filter/map

A clever way of "deleting" and element from an array without effecting is using filter

const myArr = [1,2,3,4,5,6];

console.log(myArr.filter(el => el !== 6)); // Return [1,2,3,4,5]
console.log(myArr.map(el => el !== 6)); // Returns [true, true, true true, true, false]

 
# Does the debugger makes our lives easier?

Yes debugger is very good, just go into developer console > sources then put a breakpoint where you want and step trough code

You can even download react debugging tool which gives you another 2 tabs in teh developer tools for debugging.

# How to create a Card wrapper in React and how to consolidate class names with its children?

To create a card warpper we just do the following

import styles from './Card.module.css'

function Card(props) {
  
 return <div className={`${styles.card} {props.className}`}>
             {children.props
        </div>

}

# What happens behind the scense when you use a component in another component ? (what is the props parameter reffering to)?

The component you use is basically a function so it is called and the props of the called component will be the props we set
in the parent component which is calling it

function App(){
   return <div>
             <Button onClick={myHandler}>Ok</Button>
          <div>
}

function Button(props){
  return <button onClick={props.onClick} >{props.children}</button>
}

the onClick prop of the button will call the myHandler function


# Naming convention for event handlers passed down as props to child components ? Type examples for the following : Add User,
# Change date, delete item, update product

The naming convention of event handlers is to use on before them

Lets say in your App component, you use another AddUser component which is a form. When that form is submitted we want to pass
down a function for that form which is called and the logic is handled in App.js

App.js

return <React.Fragment>
         <AddUser onAdd={addUserHandler}/>
       </React.Fragment>

When the form is submitted in our AddUser form we want to call props.onAdd which will call addUserHandler from our App.js

# Where did we handle the bad data validation in our example project ?

We handled it right where we get our data, the form input component, here we check if the data entered is ok and if it is
we use the prop handler to lift the state up to the parent component.

# Where did we add the key to our list?

In this example we create our list item component right in the Lists.js component and we need a key for it so we just have to add
the key on the <li> component

function UserLists(props) {
  return (
    <Card className={classes.users}>
      <ul>
        {props.users.map((user) => (
          <li key={user.id}>
            {user.name} ({user.age} years old)
          </li>
        ))}
      </ul>
    </Card>
  );
}


# What type of position did the teacher use for the ErrorModal background overlay ?

I used absolute positioning in my example but the teacher used fixed positioning which is way better because it doesn't depend
on a position: relative parent

.overlay{
  position:fixed;
  top:0;
  left:0;
  height: 100vh;
  width: 100%;
  background-color: rgba (0,0,0,0.35);
}

# In which component did we use the ErrorModal component and what was the logic behind it?

The ErrorModal component was used in the component that was causing the error itself, AddUser which is contains a form. And the
logic was to use the error component in the component which generates the error, semantically it is not great but later we will
use portals to fix it

# What are the workarounds of returning sibbling components in react ? Which to use ? Problems that occur? Performance?

We have the first workaround of just wrapping 2 sibblings in a DIV or creating a Wrapper component that just returns props.children

Until now we used to wrap sibblings in a div but this causes a phenomenon called div soup meaning that we nest divs unnecesarally
which can cause performance problems later on because rendering divs even if they are empty in a large project can cause issues.

# The best workaround for div soup ?

The best workaround is to use React.Fragment from the react-dom library

# What is a React Fragment and what are the 2 syntaxes for it ?

React Fragement is basically a way of wrapping 2 sibbling elements in React without causing an error. 

The 2 syntaxes are:

<React.Fragment>
  ...
</React.Fragment>

or (if project is setup for it)

<>
  ...
</>
# How to import React fragment (named and whole React)

import React, { useState} from 'react'

import React from 'react'

# Why do we need react portals ? What is the semantic impact if we didn't use portals (screen readers hint) ? What do portals do?

React portals are a way of "sending" an HTML element to a different location than the component we call it in. For example
we have an AddUser component which is in input form, if this form doesn't validate then it shows a modal in the form. Now the
modal occupies the whole screen and semantically it should be the direct child of the body component.

With React Portals we can correct this semantic mistake. Also it is real good for accesability because

# How to use react portals, imports needed, show the ReactDOM.createPortal() method

React portals need 2 items, the element we want to port and the location we want to port it to.

First is the import

import ReactDOM from 'react-dom'

<React.Fragment>
  {ReactDOM.createPortal(<ErrorModal onConfirm={props.onConfirm}/>, document.getElementById('modal-root'))}
<React.Fragment>

And lets not forget we added a new element in our ./Public/index.html with the id="modal-root" which is a direct child of the body

# What are react refs ? How do we import them ? When to use them and what not to use them for?

useRef is a react hook that lets us create a reference to the DOM element created by a component.

Example :

We create an form and place refs on the inputs. Whenever the component rerenders we will get the DOM nodes from the refs

import { useRef } from 'react'

function App(props){
 const titleInput = useRef();

 function submitHandler(event){
    event.preventDefault();
    props.onSubmit(titleInput.current.value);
}	

 <form onSubmit={submitHandler}>
   <input type='text' ref={titleInput}'/>
   <button>Ok</button>
 </form>

}

It is not recommended to change the value of the dom with refs we leave that to React.

# Explain controlled vs uncontrolled components ? (refs vs 2 way binding)

Before refs we had a 2 way binding in the input component but since we changed the 2 way binding with ref and we also reset
the value with refs(do not do this) our component became an uncontrolled component. Now you might argue we still change the value
of the inputs from react but which is tehnically correct but in reality we change the value of the DOM element where as before
the changed value came from a react state hook.


# What are effects or side effects in react?

React has one main job: Render UI , React to use action if interface needs changes then re render the component.

Now imagine we have a login form and when we click on the login form besides rendering another screen we have to make a HTTP request
to the server. This is a side effect. Everything that doesn't have to do with React and rendering the UI is basically a side effect
in our example.

To handle these side effects we are going to use a new hook called useEffect();

Pseudo example

function UserInput(){
  const [isFormValid, setFormValid] = useState();
  const [enteredEmail, setEnteredEmail] useState();

  useEffect(() => {
      let timer = setTimeout(() => {
      setFormValid(enteredEmail.includes(@));
    },500)
 

  return () => {
    clearTimeout(timer)
    }
} , [enteredEmail])

}

# what is useEffect() ? How many and what arguments does it take ?

useEffect is a react hook and it takse in 2 arguments (the last one is not necessary).

The first parameter is a function that will be called if ANY of the dependencies change

The second parameter are the dependencies. This can be omited

# When does useEffect() run ? Before or after the component evaluation ?

useEffect() runs after component evaluation (component render)

# When to use useEffect() ?

useEffect is a very important hook that should be used in response to something. For login validation we can use useEffect();

# What happens when we call useEffect() with no dependencies, with an empty array and with actual dependencies

1.) If you call useEffect() with no dependencies it will run the first time the component is rendered and everytime after the component is
reevaluated

2.) If you call useEffect() with an empty array as dependencies it will only run the first time the component is rendered

3.) If you call useEffect() with an array of dependencies it will run the first time the component is rendered and every time one of the dependencies
change

# What is debouncing and where did we use it in our project?

Debouncing is a term that comes from electronic.

Take a remote, the action of pressing a button and releasing it is much slower than the time the signal needs to travel from the button to the
boards chip exectuing the command. So debouncing is adding a delay after the button has been pressed to workaround multiple signals being sent.

Now how will we use this in our project?

We have an InputForm that currently validates on each keystroke press, in a real world app this will be sending tons of HTTP requests to the
server so we are going to use a timeout to prevent this

  useEffect(() => {
    const timer = setTimeout(() => {
      setFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6);
    }, 1000);

    return () => {
      clearTimeout(timer);
    };
  }, [enteredEmail, enteredPassword]);
}

Take the example above. 

The clearTimeout() (inside the cleanup function)  function will run before the timer is set because thats how the cleanup function works 
in this hook. After this cleans the  previous timer it sets a new one.

# Show a debouncing example when validating our form inputs?

We can take the example shown above

# When does the useEffect cleanup function run?

It runs before the code in the useEffect is executed

# What is useReducer and when to use it ?

useReducer() is a react hook and it is best use when you want to manage more complex states

# What is the syntax for useReducer()?

import {useReducer} from 'react'


         STATE   DISPATCH FUNCTION        OUR REDUCER FN          INITIAL STATE
const [emailState, dispatch] = useReducer(emailReducer, {inputValue: '', isValid: null})

We can put our reducer function outside the component because this is just a callback function that uses the arguments passed into it

function emailReducer(state, action) {
  // State is the current state and action is an object passed from dispatch

  if(action.type === 'INPUT__EMAIL'){
    return { inputValue: action.payload.value, isValid: action.paylod.value.includes('@');
  }
}


function emailChangeHandler(event) {
  dispatch({type: 'INPUT_EMAIL', payload: event.target.value})
}

This is the general syntax for reducers, keep in mind that payload can send more data than a single property, we can pass a function into it
or an object.

# What should you avoid using as a dependency in the useEffect()?

We should use only the dependencies that need to be used. For example if we use useReducer() and we only need one property of the state as 
a dependency we should only add that property and not the whoe state

# What is React Context API ? Why do we need it and how do we set it up?

The React Context API helps us passing down props from parent to all descendents without having to pass it trough each child component.

For the first way of using it we have to create a new component. The naming convention for it is kebab-case

Ex:

auth-context

import React from 'react'

const AuthContext = React.createContext({isLoggedIn: false});

export default AuthContext 

App.js

return <AuthContext.Provider value={{isLoggedin : isLoggedInSate}}>
          <Header/ onLogin={loginHandler}>
       </AuthContext.Provider>

now Imagine we need this isLoggedIn in Header and in the child of header, using it this way we don't have to pass it down manually trough
each child but we still have to set a consumer 

LastChild.js

return <AuthContext.Consumer>
          {(contextData) => {
            return <nav>
                      { contextData.isLoggedIn && (<ul>My Nav</ul>)}
                   </nav>
          }}
       </AuthContext.Consumer> 

# What is the first and second way of using React Context API?

The first way is described above and for the second way is much more elegant

1. We import {useContext} from 'react'
2. Delete the AuthContext.Consumer wrapper, we don't need it.
3. call useContext : const contextData = useContext(AuthContext) => AuthContext(imported context)

return <nav>
         {contextData.isLoggedIn && <ul>My Nav</ul>}
       </nav>


# When to use props and when to use context?

Props is our default way of passing down data trough components but we can use context if we have to pass down data trough multiple layers
of components and with props this can be quite cumbersome

# Recreate auth-context for a better understading

# What are the rules of react hooks?

1. React hooks always start with use
2. React hooks must be used inside a React component and on the top level of that component
3. Some hook related functions can be used outside a react component like react reducer functions.
4. In case of useEffect always add dependencies from inside the useEffect hook inside the dependencies array UNLESS there is no need to
like a useState function because this is guaranteed it will not change by react

# Why do we use props for reusable components and not context ? (Hint hint configuration inside parent app of the child)

When we use react context hook we can use the data provided in the react context but not change it.


function App() {
  const contextData = useContext(AuthContext);

  return (
    <React.Fragment>
      <MainHeader />
      <main>
        {!contextData.isLoggedIn && <Login />}
        {contextData.isLoggedIn && <Home />}
      </main>
    </React.Fragment>
  );
}

Notice above we just set it to a variable. 

Now imagine this was a button, we could use the context of the button but we could not add other props on the button.

### Students complained that this lecture is quite difficult if you don't understand try searching on Youtube. (reffering to reducer,
### useEffect, useContext)

# Why we use forwardRef for our inputs?

We want a behaviour in our login page where if the use clicks on the login button, the app would then highlight the incorrect input. For
this we have to make a connection between our component DOM and the component where we handle the logic.

Since this behaviour happens on react component which and the logic is handled in another component we cannot simply rely on useRef, it won't
work.

In order for this to work we have to apply useRef in the parent component on both our input fields.

# What do we need to do before using forwardRef (imperativeHandler, adding refs, second argument)

1. We transform our component into a React.forwardRef();

const MyComponent = React.forwardRef((props, ref) => {}));

2. We need to pass a second argument to our component which we always have access to function MyComponent(props,ref);
3. In order to make ref connect to the ref prop we pass where it is instanciated we have to use
useImperativeHandler(ref, () => {
  return {
    focus: activate
  ]
}
This method takes in ref as first argument and a function as a second arguemnt which returns on object which we can use in our parent
component.
 

# What binds the ref from the component to the place where the component is used?

The useImperativeHandler hook

# How to we add images in React?

For best practice we create an assets folder and we just import it like a module then use it in our JSX code

# How to create a custom input component that accepts an object as props and what is the syntax for it?

Lets say we want to creat a custom input

function Input(props){
   return {
       <label htmlFor={props.input.id}>{props.label}</label>
       <input {...props.input}/>
   }

}

function ParentComponent{
    <input input={
         type: 'text',
         placeholder: 'test',
         ...
      }
}

# How to "bind" a function to a passed down prop with arguments we want?

Let's take the following example.

We have a cart component and in the cart component we will have CartItems. Each CartItem has a 
Name, price, amount and a + and - button. With these buttons we can increase or decrease the qty
of the items in our basket.

Since these CartItems are components that we instanciate in our Cart component we can give them props
like key, name, price, amount and functions.

The functions we want to give these CartItems are onAdd and onRemove which are defined in the parent
component.

  function cartItemAddHandler(item) {
    cartContext.addItem(item);
  }
  function cartItemRemoveHandler(id) {
    cartContext.removeItem(id);
  }

  const cartItems = (
    <ul className={classes['cart-items']}>
      {cartContext.items.map((item) => (
        <CartItem
          key={item.id}
          name={item.name}
          amount={item.amount}
          price={item.price}
          onAdd={cartItemAddHandler.bind(null, { ...item, amount: 1 })}
          onRemove={cartItemRemoveHandler.bind(null, item.id)}
        />
      ))}
    </ul>

And notice in the example above how we pass predefined arguments to the onAdd and onRemove functions
with the .bind method. (Remember, the first argument of the bind method is what the this keyword
needs to point to).

## Miscelanious Questions for later when I have more knowledge

# What naming convetion do we use if we pass a handler as a prop from App.js > ParentComponent1 > ParentComponent2

# Important stuff to recap : when does useEffect run, when does a component re render if it is a controlled one ?
